[{"/home/rails/Documents/backend/client/src/index.js":"1","/home/rails/Documents/backend/client/src/reportWebVitals.js":"2","/home/rails/Documents/backend/client/src/store.js":"3","/home/rails/Documents/backend/client/src/App.js":"4","/home/rails/Documents/backend/client/src/reducers/index.js":"5","/home/rails/Documents/backend/client/src/components/home.jsx":"6","/home/rails/Documents/backend/client/src/components/logout.jsx":"7","/home/rails/Documents/backend/client/src/components/notFound.jsx":"8","/home/rails/Documents/backend/client/src/components/navbar.jsx":"9","/home/rails/Documents/backend/client/src/components/addTasks.jsx":"10","/home/rails/Documents/backend/client/src/components/tasks.jsx":"11","/home/rails/Documents/backend/client/src/components/deleteAccount.jsx":"12","/home/rails/Documents/backend/client/src/components/updateTask.jsx":"13","/home/rails/Documents/backend/client/src/components/project.jsx":"14","/home/rails/Documents/backend/client/src/components/dnd.jsx":"15","/home/rails/Documents/backend/client/src/components/addProject.jsx":"16","/home/rails/Documents/backend/client/src/components/profile.jsx":"17","/home/rails/Documents/backend/client/src/components/login.jsx":"18","/home/rails/Documents/backend/client/src/components/signup.jsx":"19","/home/rails/Documents/backend/client/src/reducers/userReducer.js":"20","/home/rails/Documents/backend/client/src/reducers/taskReducer.js":"21","/home/rails/Documents/backend/client/src/reducers/projectReducer.js":"22","/home/rails/Documents/backend/client/src/actions/userAction.js":"23","/home/rails/Documents/backend/client/src/actions/taskAction.js":"24","/home/rails/Documents/backend/client/src/actions/projectAction.js":"25","/home/rails/Documents/backend/client/src/components/input.jsx":"26","/home/rails/Documents/backend/client/src/components/userTable.jsx":"27","/home/rails/Documents/backend/client/src/components/searchBox.jsx":"28","/home/rails/Documents/backend/client/src/components/tableHeader.jsx":"29"},{"size":979,"mtime":1613469738675,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1610357711063,"results":"32","hashOfConfig":"31"},{"size":540,"mtime":1612440824918,"results":"33","hashOfConfig":"31"},{"size":1774,"mtime":1612349626873,"results":"34","hashOfConfig":"31"},{"size":286,"mtime":1611832505620,"results":"35","hashOfConfig":"31"},{"size":559,"mtime":1612442138616,"results":"36","hashOfConfig":"31"},{"size":454,"mtime":1611814527519,"results":"37","hashOfConfig":"31"},{"size":188,"mtime":1610947286015,"results":"38","hashOfConfig":"31"},{"size":2996,"mtime":1612793350096,"results":"39","hashOfConfig":"31"},{"size":1774,"mtime":1612854108887,"results":"40","hashOfConfig":"31"},{"size":3306,"mtime":1612442108013,"results":"41","hashOfConfig":"31"},{"size":614,"mtime":1612349131934,"results":"42","hashOfConfig":"31"},{"size":6652,"mtime":1613547263396,"results":"43","hashOfConfig":"31"},{"size":11316,"mtime":1613545497333,"results":"44","hashOfConfig":"31"},{"size":6745,"mtime":1612855215499,"results":"45","hashOfConfig":"31"},{"size":5874,"mtime":1612852636214,"results":"46","hashOfConfig":"31"},{"size":4723,"mtime":1612851525388,"results":"47","hashOfConfig":"31"},{"size":3880,"mtime":1612763675150,"results":"48","hashOfConfig":"31"},{"size":5060,"mtime":1612854451283,"results":"49","hashOfConfig":"31"},{"size":786,"mtime":1611819968485,"results":"50","hashOfConfig":"31"},{"size":926,"mtime":1612787842634,"results":"51","hashOfConfig":"31"},{"size":551,"mtime":1612785307236,"results":"52","hashOfConfig":"31"},{"size":1902,"mtime":1612854440399,"results":"53","hashOfConfig":"31"},{"size":2171,"mtime":1612854134190,"results":"54","hashOfConfig":"31"},{"size":1566,"mtime":1612852894070,"results":"55","hashOfConfig":"31"},{"size":775,"mtime":1612775511925,"results":"56","hashOfConfig":"31"},{"size":1169,"mtime":1613547349020,"results":"57","hashOfConfig":"31"},{"size":320,"mtime":1613465666657,"results":"58","hashOfConfig":"31"},{"size":1035,"mtime":1613543354626,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1m20khj",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rails/Documents/backend/client/src/index.js",[],["122","123"],"/home/rails/Documents/backend/client/src/reportWebVitals.js",[],"/home/rails/Documents/backend/client/src/store.js",[],"/home/rails/Documents/backend/client/src/App.js",[],"/home/rails/Documents/backend/client/src/reducers/index.js",[],"/home/rails/Documents/backend/client/src/components/home.jsx",[],"/home/rails/Documents/backend/client/src/components/logout.jsx",[],"/home/rails/Documents/backend/client/src/components/notFound.jsx",[],"/home/rails/Documents/backend/client/src/components/navbar.jsx",[],"/home/rails/Documents/backend/client/src/components/addTasks.jsx",[],"/home/rails/Documents/backend/client/src/components/tasks.jsx",[],"/home/rails/Documents/backend/client/src/components/deleteAccount.jsx",[],"/home/rails/Documents/backend/client/src/components/updateTask.jsx",[],"/home/rails/Documents/backend/client/src/components/project.jsx",["124","125"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Link, withRouter, Redirect } from \"react-router-dom\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport _ from 'lodash';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport { getUser } from \"../actions/userAction\";\nimport { findProject, updateProject } from \"../actions/projectAction\";\nimport { addTask, getTasks } from \"../actions/taskAction\";\nimport Input from \"./input\";\nimport UserTable from \"./userTable\";\nimport SearchBox from \"./searchBox\";\n\nconst token = localStorage.getItem(\"x-auth-token\");\nconst Project = (props) => {\n\n  const dispatch = useDispatch();\n  const [projectValues, setProjectValues] = useState([{}]);\n  const [values, setValues] = useState({ task: '', user: ''});\n  const [users, setUser] = useState([]);\n  const [tasks, setTask] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [sortColumn, setSortColumn] = useState({ path: '', order: '' });\n  const [searchQuery, setSearchQuery] = useState('')\n  const [date, setDate] = useState(moment().toDate())  \n  const [show, setShow] = useState(false);\n  const [show1, setShow1] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n\n  useLayoutEffect(() => {\n    const projectId = props.match.params.id;\n    dispatch(findProject(projectId, token)).then((res) => setProjectValues(res));\n    dispatch(getUser(token)).then((res) => setUser(res));\n    dispatch(getTasks(projectId, token)).then((res) => setTask(res));\n  }, [dispatch, props.match.params.id])\n\n  useEffect(() => {\n    if (searchQuery !== \"\") {\n      let filtered = props.tasks.filter((m) =>\n        m.description.toLowerCase().startsWith(searchQuery.toLowerCase()));\n      setTask(filtered)\n    }\n    if (searchQuery === \"\") setTask(props.tasks)\n  }, [searchQuery]);\n\n  const validateProperty = (name, value) => {\n    if (name === \"title\") {\n      if (value.trim() === \"\") return \"Title Is Required\";\n    }\n    if (name === \"description\") {\n      if (value.trim() === \"\") return \"Description Is Required\";\n    }\n  };\n  const validatePropertyTask = (name, value) => {\n    if (name === \"task\") {\n      if (value.trim() === \"\") return \"Task Is Required\";\n    }\n    if (name === \"user\") {\n      if (value.trim() === \"\") return \"User Is Required\";\n    }\n  };\n\n  const validate = () => {\n    const errors = {};\n    if (projectValues.title.trim() === \"\") errors.title = \"Title is required\";\n    if (projectValues.description.trim() === \"\") errors.description = \"Description is required\";\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n  const validateTask = () => {\n    const errors = {};\n    if (values.task.trim() === \"\") errors.task = \"Task is required\";\n    if (values.user.trim() === \"\") errors.user = \"User is required\";\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n\n  const handleInputChange = (e) => {\n    const err = errors;\n    const { name, value } = e.currentTarget;\n    const errorMessages = validateProperty(name, value);\n    if (errorMessages) err[name] = errorMessages;\n    else delete err[name];\n    setErrors((errors) => err || {});\n    setProjectValues({\n      ...projectValues,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const er = validate();\n    setErrors((errors) => er || {});\n    if (er) return;\n    dispatch(updateProject(projectValues, token)).then((res) => {\n      setProjectValues((projectValues) => res);\n    });\n    handleClose()\n  };\n\n  const handleInputChangeTask = (e) => {\n    const err = errors;\n    const { name, value } = e.currentTarget;\n    const errorMessages = validatePropertyTask(name, value);\n    if (errorMessages) err[name] = errorMessages;\n    else delete err[name];\n    setErrors((errors) => err || {});\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n  \n  const isWeekday = date => {\n    const day = date.getDay();\n    return day !== 0 && day !== 6;\n  };\n  const handleDateInput = (date) => {\n    if(!date) return \n    setDate(date)\n  }\n\n  const handleSubmitTask = (e) => {\n    e.preventDefault();\n    const er = validateTask();\n    setErrors((errors) => er || {});\n    if (er) return;\n    const projectId = props.match.params.id;\n    const formattedDate = moment(date).format('ll')\n    const valuesWithDate = { ...values, formattedDate}\n    dispatch(addTask(valuesWithDate, projectId, token)).then((res) => {\n      setTask((tasks) => [res, ...tasks]);\n    });\n    setValues({ task: '', user: '' })\n    handleClose1()\n  };\n\n  const handleSort = (sortColumn) => {\n    setSortColumn(sortColumn)\n    const sorted = _.orderBy(tasks, [sortColumn.path], [sortColumn.order])\n    setTask(sorted);\n  }\n\n  const handleSearch = (e) => {\n    setSearchQuery(e.currentTarget.value)\n  };\n\n  return (\n    <div>\n      {!props.users.isAdmin && (\n        <React.Fragment>\n          <Redirect to=\"/not-found\" />\n        </React.Fragment>\n      )}\n      {props.users.isAdmin && (\n        <React.Fragment>\n          <div\n            className=\"col-sm-10 card text-white bg-dark mb-3 mt-4 \"\n            style={{ marginLeft: \"100px\" }}\n          >\n            <h1 className=\"card-header\">Title : {projectValues.title}</h1>\n            <h5 className=\"card-title mt-2\">\n              Description : {projectValues.description}\n            </h5>\n            <div>\n              <Button\n                className=\"btn m-2\"\n                variant=\"primary\"\n                onClick={handleShow}\n              >\n                Update\n              </Button>\n              <Button variant=\"primary\" onClick={handleShow1}>\n                Add Task\n              </Button>\n            </div>\n          </div>\n          <div className=\"m-2\">\n            <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Update Project</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <form>\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"Title\" className=\"form-label\">\n                      Title\n                    </label>\n                    <Input\n                      value={projectValues.title}\n                      onChange={handleInputChange}\n                      name=\"title\"\n                      type=\"text\"\n                      placeholder=\"Title\"\n                      className=\"form-control\"\n                      error={errors.title}\n                    />\n                  </div>\n\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"Description\" className=\"form-label\">\n                      Description\n                    </label>\n                    <textarea\n                      value={projectValues.description}\n                      onChange={handleInputChange}\n                      name=\"description\"\n                      type=\"text\"\n                      placeholder=\"Description\"\n                      className=\"form-control\"\n                    />\n                    <div>\n                      {errors.description && (\n                        <small className=\"text-danger\">{errors.description}</small>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-3\">\n                    <Button\n                      variant=\"primary\"\n                      type=\"submit\"\n                      onClick={handleSubmit}\n                    >\n                      Submit\n                    </Button>\n                  </div>\n                </form>\n              </Modal.Body>\n            </Modal>\n          </div>\n\n          <div className=\"m-2\">\n            <Modal show={show1} onHide={handleClose1}>\n              <Modal.Header closeButton>\n                <Modal.Title>Assign Task</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <form>\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"Task\" className=\"form-label\">\n                      Task\n                    </label>\n                    <textarea\n                      value={values.task}\n                      onChange={handleInputChangeTask}\n                      name=\"task\"\n                      type=\"text\"\n                      placeholder=\"Task\"\n                      className=\"form-control\"\n                    />\n                    {errors.task && (\n                      <small className=\"text-danger\">{errors.task}</small>\n                    )}\n                  </div>\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"User\" className=\"form-label\">\n                      User\n                    </label>\n                    <select\n                      name=\"user\"\n                      id=\"user\"\n                      label=\"User\"\n                      value={values.user}\n                      className=\"form-control\"\n                      onChange={handleInputChangeTask}\n                    >\n                      <option value=\"\" />\n                      {users.map((option) => (\n                        <option key={option._id} value={option._id}>\n                          {option.name}\n                        </option>\n                      ))}\n                    </select>\n                    <div>\n                      {errors.user && (\n                        <small className=\"text-danger\">{errors.user}</small>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"mb-3\">\n                    <label htmlFor=\"Date\">Deadline Date</label>\n                    <br></br>\n                    <DatePicker\n                      selected={date}\n                      onChange={handleDateInput}\n                      name=\"date\"\n                      id=\"date\"\n                      label=\"Date\"\n                      minDate={new Date()}\n                      filterDate={isWeekday}\n                    />\n                  </div>\n                  <div>\n                      {errors.date && (\n                        <small className=\"text-danger\">{errors.date}</small>\n                      )}\n                    </div>\n                  <div className=\"mb-3\">\n                    <Button\n                      variant=\"primary\"\n                      type=\"submit\"\n                      onClick={handleSubmitTask}\n                    >\n                      Submit\n                    </Button>\n                  </div>\n                </form>\n              </Modal.Body>\n            </Modal>\n          </div>\n          <div className=\"container\">\n            <SearchBox value={searchQuery} onChange={handleSearch} />\n            <UserTable\n              tasks={tasks}\n              onSort={handleSort}\n              sortColumn={sortColumn}\n            />\n            <div className=\"row social-icons\" style={{ marginLeft: \"100px\" }}>\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  tasks: state.tasks\n});\n\nexport default withRouter(connect(mapStateToProps)(Project));\n","/home/rails/Documents/backend/client/src/components/dnd.jsx",["126"],"import { v4 as uuid } from \"uuid\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport React, { useState, useEffect } from \"react\";\nimport { getUserTasks, toggleTask } from \"../actions/taskAction\";\n\nconst token = localStorage.getItem(\"x-auth-token\");\n\nconst Dnd = (props) => {\n  const dispatch = useDispatch();\n\n  const [columns, setColumns] = useState([]);\n\n  useEffect(() => {\n    const userId = props.users.user._id;\n    dispatch(getUserTasks(userId, token)).then((res) => {\n      setColumns({\n        [uuid()]: {\n          name: \"Todo\",\n          items: res.filter((a) => a.status === \"todo\"),\n        },\n        [uuid()]: {\n          name: \"In Progress\",\n          items: res.filter((a) => a.status === \"process\"),\n        },\n        [uuid()]: {\n          name: \"Done\",\n          items: res.filter((a) => a.status === \"done\"),\n        },\n      });\n    });\n  }, []);\n\n  const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const { source, destination } = result;\n    if (source.droppableId !== destination.droppableId) {\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [removed] = sourceItems.splice(source.index, 1);\n      if (removed.status === \"process\") {\n        if (destColumn.name === \"Done\") {\n          removed.status = \"done\";\n          dispatch(toggleTask(removed, token));\n        }\n        if (destColumn.name === \"Todo\") {\n          removed.status = \"todo\";\n          dispatch(toggleTask(removed, token));\n        }\n      }\n\n      if (removed.status === \"done\") {\n        if (destColumn.name === \"In Progress\") {\n          removed.status = \"process\";\n          dispatch(toggleTask(removed, token));\n        }\n        if (destColumn.name === \"Todo\") {\n          removed.status = \"todo\";\n          dispatch(toggleTask(removed, token));\n        }\n      }\n      if (removed.status === \"todo\") {\n        if (destColumn.name === \"In Progress\") {\n          removed.status = \"process\";\n          dispatch(toggleTask(removed, token));\n        }\n        if (destColumn.name === \"Done\") {\n          removed.status = \"done\";\n          dispatch(toggleTask(removed, token));\n        }\n      }\n      destItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          items: sourceItems,\n        },\n        [destination.droppableId]: {\n          ...destColumn,\n          items: destItems,\n        },\n      });\n    } else {\n      const column = columns[source.droppableId];\n      const copiedItems = [...column.items];\n      const [removed] = copiedItems.splice(source.index, 1);\n      copiedItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...column,\n          items: copiedItems,\n        },\n      });\n    }\n  };\n  console.log(columns);\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\n      {!token && (\n        <React.Fragment>\n          <Redirect to=\"/not-found\" />\n        </React.Fragment>\n      )}\n      {token && (\n        <React.Fragment>\n          <DragDropContext\n            onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\n          >\n            {Object.entries(columns).map(([columnId, column], index) => {\n              return (\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                  }}\n                  key={columnId}\n                >\n                  <h2>{column.name}</h2>\n\n                  <div style={{ margin: 8 }}>\n                    <Droppable droppableId={columnId} key={columnId}>\n                      {(provided, snapshot) => {\n                        return (\n                          <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            style={{\n                              background: snapshot.isDraggingOver\n                                ? \"lightblue\"\n                                : \"lightgrey\",\n                              padding: 4,\n                              width: 250,\n                              minHeight: 500,\n                            }}\n                          >\n                            {column.items.map((item, index) => {\n                              return (\n                                <Draggable\n                                  key={item._id}\n                                  draggableId={item._id}\n                                  index={index}\n                                >\n                                  {(provided, snapshot) => {\n                                    return (\n                                      <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={{\n                                          userSelect: \"none\",\n                                          padding: 16,\n                                          margin: \"0 0 8px 0\",\n                                          minHeight: \"50px\",\n                                          backgroundColor: snapshot.isDragging\n                                            ? \"#263B4A\"\n                                            : \"#2d4059\",\n                                          color: \"white\",\n                                          ...provided.draggableProps.style,\n                                        }}\n                                      >\n                                        {item.description}\n                                      </div>\n                                    );\n                                  }}\n                                </Draggable>\n                              );\n                            })}\n                            {provided.placeholder}\n                          </div>\n                        );\n                      }}\n                    </Droppable>\n                  </div>\n                </div>\n              );\n            })}\n          </DragDropContext>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  users: state.users,\n});\nexport default connect(mapStateToProps)(Dnd);\n","/home/rails/Documents/backend/client/src/components/addProject.jsx",["127"],"import { Redirect, Link } from \"react-router-dom\";\nimport { connect, useDispatch } from \"react-redux\";\nimport React, { useEffect, useState } from \"react\";\nimport Input from \"./input\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport {\n  addProject,\n  getProjects,\n  removeProject,\n} from \"../actions/projectAction\";\n\nconst initialValues = {\n  title: \"\",\n  description: \"\",\n};\n\nconst token = localStorage.getItem(\"x-auth-token\");\n\nconst AddProject = (props) => {\n  const [show, setShow] = useState(false);\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getProjects(token));\n  }, [dispatch]);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleInputChange = (e) => {\n    const err = errors;\n    const { name, value } = e.currentTarget;\n    const errorMessages = validateProperty(name, value);\n    if (errorMessages) err[name] = errorMessages;\n    else delete err[name];\n    setErrors((errors) => err || {});\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const validateProperty = (name, value) => {\n    if (name === \"title\") {\n      if (value.trim() === \"\") return \"Title Is Required\";\n    }\n    if (name === \"description\") {\n      if (value.trim() === \"\") return \"Description Is Required\";\n    }\n  };\n\n  const validate = () => {\n    const errors = {};\n    if (values.title.trim() === \"\") errors.title = \"Title is required\";\n    if (values.description.trim() === \"\")\n      errors.description = \"Description is required\";\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const er = validate();\n    setErrors((errors) => er || {});\n    if (er) return;\n    dispatch(addProject(values,token));\n    setValues({\n      title: \"\",\n      description: \"\",\n    });\n    handleClose();\n  };\n\n  const handleRemove = async (project) => {\n    dispatch(removeProject(project._id, token));\n  };\n\n  return (\n    <React.Fragment>\n      {!token && !props.users.isAdmin && (\n        <React.Fragment>\n          <Redirect to=\"/not-found\" />\n        </React.Fragment>\n      )}\n\n      {token && props.users.isAdmin && (\n        <React.Fragment>\n          <div className=\"container mt-4\">\n            <h1> Welcome </h1>\n            <h5> Now You Can Manage Your Project and Tasks... Here </h5>\n            <Button\n              className=\" btn btn-lg mt-3\"\n              variant=\"primary\"\n              onClick={handleShow}\n            >\n              New Project\n            </Button>\n          </div>\n\n          <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>New Project</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <form>\n                <div className=\"mb-3\">\n                  <label htmlFor=\"title\" className=\"form-label\">\n                    Title\n                  </label>\n                  <Input\n                    value={values.title}\n                    onChange={handleInputChange}\n                    name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    className=\"form-control\"\n                    error={errors.title}\n                  />\n                </div>\n                <div className=\"mb-3\">\n                  <label htmlFor=\"password\" className=\"form-label\">\n                    Description\n                  </label>\n                  <textarea\n                    value={values.description}\n                    onChange={handleInputChange}\n                    name=\"description\"\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    className=\"form-control\"\n                  />\n                </div>\n                <div>\n                  {errors.description && (\n                    <small className=\"text-danger\">{errors.description}</small>\n                  )}\n                </div>\n                <div className=\"m-3\">\n                   \n                    <Button\n                      variant=\"primary\"\n                      type=\"submit\"\n                      onClick={handleSubmit}\n                    >\n                      Submit\n                    </Button>\n                </div>\n              </form>\n            </Modal.Body>\n          </Modal>\n\n          <div className=\"mt-5\">\n            <ul className=\"container\">\n              {props.projects.map((project) => (\n                <li className=\"list-group-item\" key={project._id}>\n                  {\" \"}\n                  <div className=\"row\">\n                    <div className=\"col-2 text-left\">\n                      <h4>{project.title} </h4>\n                    </div>\n                    <div className=\"col-8 text-left\">\n                      <p>Description : {project.description} </p>\n                    </div>\n                    <div className=\"col-1 ml-auto\">\n                      <Link to={`/project/${project._id}`}>\n                        <i className=\"fa fa-eye\"></i>\n                      </Link>\n                    </div>\n                    <div className=\"col-1\">\n                      <i\n                        className=\"fa fa-trash\"\n                        aria-hidden=\"true\"\n                        onClick={() => handleRemove(project)}\n                        style={{ cursor: \"pointer\" }}\n                      ></i>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  projects: state.projects,\n});\n\nexport default connect(mapStateToProps)(AddProject);\n","/home/rails/Documents/backend/client/src/components/profile.jsx",[],"/home/rails/Documents/backend/client/src/components/login.jsx",[],"/home/rails/Documents/backend/client/src/components/signup.jsx",[],"/home/rails/Documents/backend/client/src/reducers/userReducer.js",[],"/home/rails/Documents/backend/client/src/reducers/taskReducer.js",[],"/home/rails/Documents/backend/client/src/reducers/projectReducer.js",[],"/home/rails/Documents/backend/client/src/actions/userAction.js",[],"/home/rails/Documents/backend/client/src/actions/taskAction.js",[],"/home/rails/Documents/backend/client/src/actions/projectAction.js",[],"/home/rails/Documents/backend/client/src/components/input.jsx",[],"/home/rails/Documents/backend/client/src/components/userTable.jsx",[],"/home/rails/Documents/backend/client/src/components/searchBox.jsx",[],"/home/rails/Documents/backend/client/src/components/tableHeader.jsx",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":14},{"ruleId":"136","severity":1,"message":"137","line":50,"column":6,"nodeType":"138","endLine":50,"endColumn":19,"suggestions":"139"},{"ruleId":"136","severity":1,"message":"140","line":33,"column":6,"nodeType":"138","endLine":33,"endColumn":8,"suggestions":"141"},{"ruleId":"132","severity":1,"message":"142","line":6,"column":10,"nodeType":"134","messageId":"135","endLine":6,"endColumn":15},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.tasks'. Either include it or remove the dependency array. If 'setTask' needs the current value of 'props.tasks', you can also switch to useReducer instead of useState and read 'props.tasks' in the reducer.","ArrayExpression",["145"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.users.user._id'. Either include them or remove the dependency array.",["146"],"'toast' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [props.tasks, searchQuery]",{"range":"151","text":"152"},"Update the dependencies array to be: [dispatch, props.users.user._id]",{"range":"153","text":"154"},[2005,2018],"[props.tasks, searchQuery]",[995,997],"[dispatch, props.users.user._id]"]